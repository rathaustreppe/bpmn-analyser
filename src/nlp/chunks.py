from typing import Tuple

from nltk.corpus import wordnet
from nltk.corpus.reader import Synset


class ChunkGrams:
    """
    A class containing all pre-defined chunks.
    In later development this is put into a separate file,
    generated by a GUI-Tool.
    """
    # put ChunkGrams here
    pass


class SynonymCloud:
    """
    A class where all important synonymclouds are defined.
    In later development this is put into a separate file,
    generated by a GUI-Tool.
    """

    # is in one file because closely realted to ChunkGrams.
    # This file is a living document.

    def are_synonyms(self, solution_synset: Synset,
                     tagged_word: Tuple[
                         str, str]) -> bool:
        # Assumption: If the list of all Synsets of tagged_word
        # contains the solution_synset, then tagged_word is
        # closely (at least close enough) to solution_synset and
        # therefore it is a synonym.
        # Requires the exact Synset. E.g 'mail.v.02'. 'mail' is
        # not enough.
        word = tagged_word[0]
        word_type = self.get_wordnet_pos(tagged_word[1])
        synset_words = wordnet.synsets(word, word_type)

        if solution_synset in synset_words:
            return True
        return False

    def get_wordnet_pos(self, treebank_tag):
        if treebank_tag.startswith('J'):
            return wordnet.ADJ
        elif treebank_tag.startswith('V'):
            return wordnet.VERB
        elif treebank_tag.startswith('N'):
            return wordnet.NOUN
        elif treebank_tag.startswith('R'):
            return wordnet.ADV
        else:
            return ''
